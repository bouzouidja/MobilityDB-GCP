apiVersion: v1
kind: Service
metadata:
  name: citus-coordinator
  labels:
    app: citus-coordinator
spec:
  type: NodePort
  selector:
    app: citus-coordinator
  ports:
    - port: 5432
      nodePort: 30001
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: citus-coordinator
  labels:
    app: citus-coordinator
spec:
  serviceName: citus-coordinator
  replicas: 1
  minReadySeconds: 10
  selector:
    matchLabels:
      app: citus-coordinator
  template:
    metadata:
      labels:
        app: citus-coordinator
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgresdb
        image: bouzouidja/mobilitydb-cloud:latest
        imagePullPolicy: "IfNotPresent"
        args:
            - -c
            - max_locks_per_transaction=128
            - -c
            - shared_preload_libraries=citus, postgis-3.so, pg_stat_statements
            - -c
            - wal_level=logical
            #- -c
            #- hba_file=/etc/postgres/pg_hba.conf
            #- ssl=on
            #- -c
            #- ssl_cert_file=/etc/postgresql-secrets-vol/server.crt
            #- -c
            #- ssl_key_file=/etc/postgresql-secrets-vol/server.key

        ports:
        - containerPort: 5432
        #resources:
        #  limits:
        #    cpu: 500m
        #  requests:
        #    cpu: 200m
        lifecycle:
            postStart:
              exec:
              #Command to be executed after the initialization of the worker Pod: 1) Create Extensions (pg_stat_statements to get query exec times and pg_cron to create monitoring jobs) 2) Create sessions_log table 3) Create function to monitor sessions every seconds 4) Create pg_cron job to execute the function every minute 4) Create pg_cron job to clear the sessions_log table every 30 minutes

                command: ["/bin/sh", "-c", "sleep 7 ;printf \"local all all trust\nhost all all 127.0.0.1/32 trust\nhost all all ::1/128 trust\nhost all all 0.0.0.0/0 trust\nlocal replication all trust\nhost replication all 127.0.0.1/32 trust\nhost replication all ::1/128 trust \" > /var/lib/postgresql/data/pg_hba.conf;createdb -U $POSTGRES_USER  $POSTGRES_DB; psql -U $POSTGRES_USER -d $POSTGRES_DB --command=\" SELECT pg_reload_conf();\"  ;psql -U $POSTGRES_USER -d $POSTGRES_DB --command=\" CREATE EXTENSION IF NOT EXISTS citus;\";psql -U $POSTGRES_USER -d $POSTGRES_DB --command=\"DELETE  FROM pg_dist_node;\"  ;psql -U $POSTGRES_USER -d $POSTGRES_DB --command=\"SELECT citus_set_coordinator_host('$POD_IP', 5432);\";"]
            #preStop:
            #  exec:
              #Commands to be executed before terminating the worker Pod: 1)Unregister current Worker from Citus cluster by using $POD_ID env variable
            #    command: ["/bin/sh", "-c", " psql  -U $POSTGRES_USER -d $POSTGRES_DB --command=\"SELECT * from citus_remove_node('$POD_IP', 5432);\";"]
            
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
            #- mountPath: "/etc/postgres"
            #  name: pg-hba
            #  readOnly: true
            #- mountPath: /etc/postgresql-secrets-vol
            #  name: secret-vol
            #- mountPath: /etc/postgresql-secrets-vol/params
            #  name: postgres-secret  
      volumes:
        #- name: pg-hba
        #  configMap:
         #   name: pg-hba
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim-coordinator
        #- name: secret-vol
        #  secret:
        #    secretName: postgresql-secrets 
        #    defaultMode: 0640
        #- name: postgres-secret
        #  secret:
        #    secretName: postgres-secret